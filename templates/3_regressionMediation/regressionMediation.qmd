---
title: "Regression and Mediation Analysis"
author: "Julius Fenn"
date: today
format:
  html:
    toc: true
    toc-depth: 3
    html-math-method: katex
bibliography: Library_subset.bib
biblio-style: apalike
link-citations: true
---


# Background Information


This is an [R Markdown](http://rmarkdown.rstudio.com) document. Instructions for writing these documents and background information can be found in the book written by @xieMarkdownDefinitiveGuide2018 When you execute code within the document, the results appear beneath the code. This is an [R Markdown](http://rmarkdown.rstudio.com) document. Instructions for writing these documents and background information can be found in the book written by @xieMarkdownDefinitiveGuide2018 When you execute code within the document, the results appear beneath the code. This file contains summary statistics, respectively the analysis step (confirmatory and exploratory analyses). Files are split into multiple subfiles like data processing and data analyses steps, which follows the classical data-analysis pipeline [see @pengArtDataScience2016; @wickhamDataScienceImport2017].

# Global Variables

```{r}
# none global variables defined
```

# get packages, raw data, functions


```{r}
#| echo: true
#| warning: false
#| label: get raw data

### install and load packages
#  if packages are not already installed, the function will install and activate them
usePackage <- function(p) {
  if (!is.element(p, installed.packages()[,1]))
    install.packages(p, dep = TRUE, repos = "http://cran.us.r-project.org")
  require(p, character.only = TRUE)
}

usePackage("tidyverse")
usePackage("dplyr")
usePackage("readxl") # read .xlsx file
usePackage("haven") # read, import SPSS files

usePackage("stargazer")



usePackage("semPlot")
usePackage("lavaan") # ggplot2 will be loaded


### load data files
## change working directory
setwd("data")
## load data
dat_Fenn2023 <- readxl::read_excel(path = "questionnaire.xlsx", sheet = 1)
dat_ESS <- readRDS(file = "dat_SPSS_subset.rds")


### load functions
# print(getwd())
setwd("../functions")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}

rm(i)
```

# Regression Analysis

```{r}
table(dat_ESS$lrscale_dummy)
boxplot(dat_ESS$lrscale ~ dat_ESS$lrscale_dummy)
```


```{r}
# Correlation test and report
cor_result <- cor.test(dat_ESS$stflife, dat_ESS$mean_MigEnrich, use = "complete")
report::report(cor_result)

# Improved ggplot with regression line
ggplot(dat_ESS, aes(x = stflife, y = mean_MigEnrich)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  labs(
    title = "Relationship between Life Satisfaction and Attitudes Toward Migrant Enrichment",
    x = "Life Satisfaction (stflife)",
    y = "Mean Migrant Enrichment Score (mean_MigEnrich)"
  ) +
  theme_minimal()
```
```{r}
# Get unique groups
groups <- unique(dat_ESS$lrscale_dummy)

# Loop through each group and compute correlation
for (g in groups) {
  cat("Group:", g, "\n")
  
  # Subset the data
  sub_data <- subset(dat_ESS, lrscale_dummy == g)
  
  # Run correlation test
  result <- cor.test(sub_data$stflife, sub_data$mean_MigEnrich, use = "complete.obs")
  
  # Print correlation estimate and p-value
  print(result)
  cat("\n")
}
```
```{r}
dat_upper <- dat_ESS %>%
  filter(dat_ESS$lrscale_dummy == "right")
dim(dat_upper)
dat_lower <- dat_ESS %>%
  filter(dat_ESS$lrscale_dummy == "left")
dim(dat_lower)
```



```{r}
lm_lower <- lm(formula = mean_MigEnrich ~ mean_Trust + stflife + gndr + rlgdgr, data = dat_lower)
lm_upper <- lm(formula = mean_MigEnrich ~ mean_Trust + stflife + gndr + rlgdgr, data = dat_upper)
summary(lm_lower)
summary(lm_upper)
```

Again we can use the **stargazer** package, which identifies `lm_upper` for example as an lm-object in R and creates a wonderful table for the model results: 

```{r}
#| echo: true
#| warning: false
#| results: asis
#| label: regression for low, high using stargazer

setwd("outputs")


stargazer(lm_lower, type = "html", out = "lm_lower.html")
stargazer(lm_upper, type = "html", out = "lm_upper.html")
```














```{r}
# Discretize stflife into bins (e.g., quartiles)
dat_ESS$trust_bin <- cut(dat_ESS$stflife, breaks = quantile(dat_ESS$mean_Trust, probs = seq(0, 1, 0.25), na.rm = TRUE), include.lowest = TRUE)

# Remove missing data
valid_rows <- complete.cases(dat_ESS$trust_bin, dat_ESS$lrscale_dummy, dat_ESS$mean_MigEnrich)

# Make factors
f1 <- dat_ESS$trust_bin[valid_rows]
f2 <- dat_ESS$lrscale_dummy[valid_rows]
y  <- dat_ESS$mean_MigEnrich[valid_rows]

# Plot
interaction.plot(f1, f2, y,
                 col = 1:length(levels(f2)), lty = 1, lwd = 2,
                 trace.label = "lrscale_dummy",
                 xlab = "Trust (Binned)",
                 ylab = "Mean Migrant Enrichment",
                 main = "Interaction: Trust x Political Orientation")
```





# Mediation Analysis


## Manifest


## Latent


```{r}
regEx <- "^acceptability|^RiskBenefit.*r$|^panas.*n$"
tmp_vars <- str_subset(string = colnames(dat_Fenn2023), pattern = regEx)

tmp_dat_mediation <- dat_Fenn2023[,tmp_vars]


a <- str_extract(string = colnames(tmp_dat_mediation), pattern = "[:digit:]+")
b <- str_extract(string = colnames(tmp_dat_mediation), pattern = "(?<=[:digit:]{2}).*")


colnames(tmp_dat_mediation) <- paste0(b,a)

# model_lavaan(vars = paste0(b,a), labelLatentVar = "test")

model <- '
 acceptability =~ bi01 + gen01 + bi02 + genr02 + bir03 + gen03 + bir04 + genr04 + bi05 + gen05 + bir06 + bi07 + bir08 + bi09

  percRisks =~ r01 + r02 + r03 + r04 + r05

negAffect =~ n01 + n02 + n03 + n04 + n05 + n06 + n07 + n08 + n09 + n10


# adjustments
n03 ~~ n07;
n05 ~~ n06;
n04 ~~ n10;


# direct effect
acceptability ~ c*negAffect
# mediator
percRisks ~ a*negAffect
acceptability ~ b*percRisks


# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)

         '
fit <- sem(model, data = tmp_dat_mediation, estimator = "MLR")
summary(fit, standardized = TRUE)
# fit_bootstrap <- sem(model, data = tmp_dat_mediation, estimator = "ML", se ="bootstrap")
# summary(fit_bootstrap, standardized = TRUE)



semPlot::semPaths(object = fit, what = "std", edge.label.cex = 0.5)
round(fitmeasures(fit,
                  fit.measures =c("aic", "bic", "logl", "pvalue",
                                  "rmsea", "rmsea.ci.lower", "rmsea.ci.upper",
                                  "srmr", "cfi")), digits = 3)

```





# References

